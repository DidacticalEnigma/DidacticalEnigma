// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DidacticalEnigmaRestApi.
    /// </summary>
    public static partial class DidacticalEnigmaRestApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<DataSourceInformation> ListDataSources(this IDidacticalEnigmaRestApi operations)
            {
                return operations.ListDataSourcesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DataSourceInformation>> ListDataSourcesAsync(this IDidacticalEnigmaRestApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataSourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IDictionary<string, DataSourceParseResponse> RequestInformationFromDataSources(this IDidacticalEnigmaRestApi operations, DataSourceParseRequest body = default(DataSourceParseRequest))
            {
                return operations.RequestInformationFromDataSourcesAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, DataSourceParseResponse>> RequestInformationFromDataSourcesAsync(this IDidacticalEnigmaRestApi operations, DataSourceParseRequest body = default(DataSourceParseRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestInformationFromDataSourcesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ListRadicalsResult ListRadicals(this IDidacticalEnigmaRestApi operations)
            {
                return operations.ListRadicalsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListRadicalsResult> ListRadicalsAsync(this IDidacticalEnigmaRestApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRadicalsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            public static KanjiLookupResult SelectRadicals(this IDidacticalEnigmaRestApi operations, string query = default(string), string sort = default(string))
            {
                return operations.SelectRadicalsAsync(query, sort).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KanjiLookupResult> SelectRadicalsAsync(this IDidacticalEnigmaRestApi operations, string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SelectRadicalsWithHttpMessagesAsync(query, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullText'>
            /// </param>
            public static IList<IList<WordInfo>> GetWordInformation(this IDidacticalEnigmaRestApi operations, string fullText = default(string))
            {
                return operations.GetWordInformationAsync(fullText).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<WordInfo>>> GetWordInformationAsync(this IDidacticalEnigmaRestApi operations, string fullText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWordInformationWithHttpMessagesAsync(fullText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullText'>
            /// </param>
            public static WordInfoResponse PostText(this IDidacticalEnigmaRestApi operations, string fullText = default(string))
            {
                return operations.PostTextAsync(fullText).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fullText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WordInfoResponse> PostTextAsync(this IDidacticalEnigmaRestApi operations, string fullText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostTextWithHttpMessagesAsync(fullText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            public static void DeleteText(this IDidacticalEnigmaRestApi operations, string identifier = default(string))
            {
                operations.DeleteTextAsync(identifier).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTextAsync(this IDidacticalEnigmaRestApi operations, string identifier = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTextWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
